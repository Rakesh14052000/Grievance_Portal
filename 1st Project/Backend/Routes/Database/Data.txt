CREATE TABLE AdminData (id INT AUTO_INCREMENT PRIMARY KEY, FirstName VARCHAR(255) NULL, LastName VARCHAR(255) NULL,Email VARCHAR(255) NOT NULL UNIQUE, Password VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);


INSERT INTO AdminData (FirstName, LastName, Email, Password) VALUES ('John', 'Doe', 'johndoe@example.com', 'password123');


import { useEffect, useState } from "react";

const Modal = ({ isOpen, onClose, data }) => {
  const [attachment, setAttachment] = useState(null);

  // Handle the attachment loading when modal is open
  useEffect(() => {
    if (isOpen && data && data.attachment) {
      // Assuming 'data.attachment' contains the URL or data you need to fetch
      fetch(data.attachment.url)
        .then((response) => response.json())
        .then((attachmentData) => {
          setAttachment(attachmentData);
        })
        .catch((error) => {
          console.error("Error fetching attachment:", error);
          setAttachment(null); // Set null or an error message
        });
    }
  }, [isOpen, data]);

  useEffect(() => {
    const handleEsc = (event) => {
      if (event.key === "Escape") onClose();
    };
    window.addEventListener("keydown", handleEsc);
    return () => window.removeEventListener("keydown", handleEsc);
  }, [onClose]);

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "unset";
    }
  }, [isOpen]);

  if (!isOpen) return null;

  const renderAttachment = (attachment) => {
    if (!attachment) return <span>No Attachment</span>;

    const fileUrl = attachment.url; // Assuming attachment has a 'url' field
    const urlWithoutParams = fileUrl.split("?")[0]; // Remove query string
    const fileExtension = urlWithoutParams.split(".").pop().toLowerCase();

    const handleOpenFile = () => {
      window.open(`/file-viewer?file=${encodeURIComponent(fileUrl)}`, "_blank");
    };

    return (
      <button
        onClick={handleOpenFile}
        className="text-blue-600 hover:underline focus:outline-none"
      >
        .{fileExtension}
      </button>
    );
  };

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div
        className="fixed inset-0 bg-black/30 bg-opacity-50 backdrop-blur-100 transition-opacity duration-300"
        onClick={onClose}
      ></div>

      <div className="flex min-h-screen items-center justify-center !p-4">
        <div className="relative bg-white rounded-lg shadow-xl max-w-xl w-full !m-4 transform transition-all dark-mode">
          <div className="flex items-center justify-between !p-4 border-b">
            <h3 className="text-md font-semibold text-gray-900 dark-mode">{data.Grievance}</h3>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-500 focus:outline-none"
            >
              <svg
                className="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>

          <div className="!p-4">
            {data && (
              <div className="space-y-6">
                {/* Table for basic data */}
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50 dark-mode">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark-mode">
                          Field
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark-mode">
                          Value
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200 dark-mode">
                      <tr>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark-mode">
                          Name
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-mode">
                          {data.Name}
                        </td>
                      </tr>
                      <tr>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark-mode">
                          Email
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-mode">
                          {data.Email}
                        </td>
                      </tr>
                      <tr>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark-mode">
                          Message
                        </td>
                        <td className="!ps-20 py-4 whitespace-normal text-justify text-sm text-gray-500 dark-mode">
                          {data.Message}
                        </td>
                      </tr>
                      {attachment && (
                        <tr>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            Attachment
                          </td>
                          <td className="px-6 py-4 whitespace-normal text-sm text-gray-500">
                            {renderAttachment(attachment)}
                          </td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
          </div>

          <div className="flex justify-end !p-4 border-t">
            <button
              onClick={onClose}
              className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 !mr-3 hover:underline"
            >
              Accept
            </button>
            <button
              onClick={onClose}
              className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 hover:underline"
            >
              Reject
            </button>
          </div>
        </div>
      </div>
      <style jsx>{`body.dark .dark-mode {
      background-color: var(--light);
      color: var(--dark);
      .dark-mode:hover {
        background-color: var(--grey);
      }
    }`}</style>
    </div>
  );
};

export default Modal;

